
-- =====================================================================
-- FinGuard AI â€“ Oracle Database Schema (Core + Ops)
-- Compatible with Oracle 12c and above
-- Author: ChatGPT (GPT-5 Thinking)
-- =====================================================================

-- Optional: create a dedicated schema (uncomment and adjust as needed)
-- CREATE USER FINGUARD IDENTIFIED BY "Strong#Password1" DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP QUOTA UNLIMITED ON USERS;
-- GRANT CONNECT, RESOURCE, CREATE VIEW, CREATE MATERIALIZED VIEW, CREATE JOB, CREATE PROCEDURE, CREATE SEQUENCE, CREATE TRIGGER TO FINGUARD;
-- ALTER USER FINGUARD QUOTA UNLIMITED ON USERS;
-- ALTER SESSION SET NLS_TIMESTAMP_TZ_FORMAT='YYYY-MM-DD HH24:MI:SS.FF TZR';

-- =====================================================================
-- Reference & Master Data
-- =====================================================================

CREATE TABLE fg_customers (
  customer_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  external_ref       VARCHAR2(64) UNIQUE,         -- Core banking ID / CIF
  full_name          VARCHAR2(200) NOT NULL,
  email              VARCHAR2(200),
  phone_e164         VARCHAR2(20),                -- +91...
  kyc_level          VARCHAR2(30),
  risk_segment       VARCHAR2(30) DEFAULT 'NORMAL',
  created_at         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  updated_at         TIMESTAMP(6) WITH TIME ZONE
);

CREATE TABLE fg_accounts (
  account_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id        NUMBER NOT NULL REFERENCES fg_customers(customer_id),
  core_acct_no       VARCHAR2(64) UNIQUE NOT NULL,
  acct_type          VARCHAR2(30),                -- SAVINGS, CURRENT, CREDIT_CARD
  currency           CHAR(3) DEFAULT 'INR',
  status             VARCHAR2(20) DEFAULT 'ACTIVE',
  opened_at          TIMESTAMP(6) WITH TIME ZONE,
  closed_at          TIMESTAMP(6) WITH TIME ZONE
);

CREATE TABLE fg_merchants (
  merchant_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name               VARCHAR2(200) NOT NULL,
  mcc_code           VARCHAR2(4),                 -- ISO 18245 MCC
  category           VARCHAR2(60),
  country            CHAR(2),
  city               VARCHAR2(120)
);

CREATE TABLE fg_devices (
  device_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id        NUMBER REFERENCES fg_customers(customer_id),
  device_fingerprint VARCHAR2(128) UNIQUE,
  os                 VARCHAR2(40),
  app_version        VARCHAR2(40),
  last_seen_at       TIMESTAMP(6) WITH TIME ZONE
);

CREATE TABLE fg_blacklist (
  bl_id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type               VARCHAR2(20) NOT NULL,       -- IP, CARD, DEVICE, MERCHANT, PHONE
  value              VARCHAR2(200) NOT NULL,
  reason             VARCHAR2(200),
  valid_from         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  valid_to           TIMESTAMP(6) WITH TIME ZONE,
  CONSTRAINT uq_fg_blacklist UNIQUE(type, value)
);

-- =====================================================================
-- Streaming & Transactions (Partitioned)
-- =====================================================================

-- Core transactions captured from Kafka (immutable ledger-like facts)
CREATE TABLE fg_transactions (
  txn_id             NUMBER GENERATED BY DEFAULT AS IDENTITY,
  event_id           VARCHAR2(64) UNIQUE,         -- Kafka message key/idempotency
  event_ts           TIMESTAMP(6) WITH TIME ZONE NOT NULL,
  account_id         NUMBER NOT NULL REFERENCES fg_accounts(account_id),
  counterparty_acct  VARCHAR2(64),
  merchant_id        NUMBER REFERENCES fg_merchants(merchant_id),
  amount             NUMBER(18,2) NOT NULL,
  currency           CHAR(3) DEFAULT 'INR',
  channel            VARCHAR2(30),                -- UPI, CARD, NETBANKING, ATM, IMPS, NEFT
  geolat             NUMBER(9,6),
  geolon             NUMBER(9,6),
  ip_addr            VARCHAR2(45),
  device_id          NUMBER REFERENCES fg_devices(device_id),
  status             VARCHAR2(20) DEFAULT 'POSTED', -- POSTED, REVERSED, DECLINED, HOLD
  created_at         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  PRIMARY KEY (txn_id)
)
PARTITION BY RANGE (CAST(event_ts AS DATE))
INTERVAL (NUMTOYMINTERVAL(1, 'MONTH'))
( PARTITION p_base VALUES LESS THAN (DATE '2025-01-01') );

CREATE INDEX idx_fg_txn_acct_ts ON fg_transactions(account_id, event_ts);
CREATE INDEX idx_fg_txn_merchant ON fg_transactions(merchant_id);
CREATE INDEX idx_fg_txn_device ON fg_transactions(device_id);
CREATE INDEX idx_fg_txn_amt ON fg_transactions(amount);

-- Derived / feature-store snapshot per transaction (denormalized, append-only)
CREATE TABLE fg_txn_features (
  txn_id             NUMBER PRIMARY KEY REFERENCES fg_transactions(txn_id) ON DELETE CASCADE,
  feature_json       CLOB CHECK (feature_json IS JSON),
  computed_at        TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- =====================================================================
-- Models, Rules, Scores & Explanations
-- =====================================================================

CREATE TABLE fg_model_versions (
  model_id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  model_name         VARCHAR2(100) NOT NULL,      -- e.g., "gbm_txn_v2"
  version            VARCHAR2(40) NOT NULL,       -- semver or git hash
  deployed_at        TIMESTAMP(6) WITH TIME ZONE,
  status             VARCHAR2(20) DEFAULT 'ACTIVE',
  notes              CLOB
);

CREATE UNIQUE INDEX uq_fg_model_name_ver ON fg_model_versions(model_name, version);

CREATE TABLE fg_model_scores (
  score_id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  txn_id             NUMBER NOT NULL REFERENCES fg_transactions(txn_id) ON DELETE CASCADE,
  model_id           NUMBER NOT NULL REFERENCES fg_model_versions(model_id),
  risk_score         NUMBER(5,2) NOT NULL,        -- 0.00 - 100.00
  threshold_used     NUMBER(5,2),
  inference_ms       NUMBER,
  explain_json       CLOB CHECK (explain_json IS JSON),
  scored_at          TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

CREATE INDEX idx_fg_scores_txn ON fg_model_scores(txn_id);

CREATE TABLE fg_rules (
  rule_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  rule_code          VARCHAR2(64) UNIQUE NOT NULL, -- e.g., "VELOCITY_1H_5TXN"
  name               VARCHAR2(200),
  severity           VARCHAR2(10) CHECK (severity IN ('LOW','MEDIUM','HIGH','CRITICAL')),
  is_active          CHAR(1) DEFAULT 'Y',
  definition_json    CLOB CHECK (definition_json IS JSON), -- portable rule spec
  created_at         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

CREATE TABLE fg_rule_hits (
  hit_id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  txn_id             NUMBER NOT NULL REFERENCES fg_transactions(txn_id) ON DELETE CASCADE,
  rule_id            NUMBER NOT NULL REFERENCES fg_rules(rule_id),
  details_json       CLOB CHECK (details_json IS JSON),
  hit_at             TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- Velocity counters (can be materialized from txns or maintained by stream processor)
CREATE TABLE fg_velocity_counters (
  vc_id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  key_scope          VARCHAR2(30),                -- ACCOUNT, DEVICE, MERCHANT, IP
  key_value          VARCHAR2(128),
  window_minutes     NUMBER NOT NULL,
  txn_count          NUMBER,
  total_amount       NUMBER(18,2),
  updated_at         TIMESTAMP(6) WITH TIME ZONE,
  CONSTRAINT uq_fg_velocity UNIQUE (key_scope, key_value, window_minutes)
);

-- =====================================================================
-- Alerts, Incidents & Customer Interaction
-- =====================================================================

CREATE TABLE fg_alerts (
  alert_id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  txn_id             NUMBER NOT NULL REFERENCES fg_transactions(txn_id) ON DELETE CASCADE,
  risk_score         NUMBER(5,2) NOT NULL,
  decision           VARCHAR2(20) DEFAULT 'PENDING', -- PENDING, CHALLENGE, BLOCK, ALLOW
  reason_summary     VARCHAR2(400),
  created_at         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  decided_at         TIMESTAMP(6) WITH TIME ZONE
);

CREATE INDEX idx_fg_alerts_status ON fg_alerts(decision, created_at);

CREATE TABLE fg_incidents (
  incident_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  alert_id           NUMBER NOT NULL REFERENCES fg_alerts(alert_id) ON DELETE CASCADE,
  status             VARCHAR2(20) DEFAULT 'OPEN', -- OPEN, IN_PROGRESS, RESOLVED, CLOSED
  priority           VARCHAR2(10) DEFAULT 'P2',
  assignee           VARCHAR2(120),
  sla_due_at         TIMESTAMP(6) WITH TIME ZONE,
  created_at         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  closed_at          TIMESTAMP(6) WITH TIME ZONE
);

CREATE TABLE fg_notifications (
  notification_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  alert_id           NUMBER REFERENCES fg_alerts(alert_id) ON DELETE CASCADE,
  customer_id        NUMBER REFERENCES fg_customers(customer_id),
  channel            VARCHAR2(20) NOT NULL,       -- SMS, EMAIL, WHATSAPP, IVR, PUSH
  destination        VARCHAR2(200) NOT NULL,
  message_template   VARCHAR2(200),
  message_payload    CLOB,
  status             VARCHAR2(20) DEFAULT 'SENT', -- SENT, DELIVERED, FAILED, ACKED
  sent_at            TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  acked_at           TIMESTAMP(6) WITH TIME ZONE
);

CREATE TABLE fg_otp_challenges (
  challenge_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  alert_id           NUMBER REFERENCES fg_alerts(alert_id) ON DELETE CASCADE,
  otp_ref            VARCHAR2(64) UNIQUE,
  otp_hash           VARCHAR2(128),               -- never store raw OTP
  expires_at         TIMESTAMP(6) WITH TIME ZONE,
  verified_at        TIMESTAMP(6) WITH TIME ZONE
);

CREATE TABLE fg_feedback (
  feedback_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  txn_id             NUMBER REFERENCES fg_transactions(txn_id) ON DELETE CASCADE,
  customer_id        NUMBER REFERENCES fg_customers(customer_id),
  label              VARCHAR2(20),                -- FRAUD, LEGIT
  source             VARCHAR2(20),                -- CUSTOMER, ANALYST, CHARGEBACK
  notes              CLOB,
  created_at         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- Case/alert audit trail
CREATE TABLE fg_case_audit (
  audit_id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  entity_type        VARCHAR2(20) NOT NULL,       -- ALERT, INCIDENT, NOTIFICATION
  entity_id          NUMBER NOT NULL,
  action             VARCHAR2(40) NOT NULL,       -- CREATE, UPDATE, CLOSE, ESCALATE
  actor              VARCHAR2(120) NOT NULL,      -- system/service or user
  details_json       CLOB CHECK (details_json IS JSON),
  created_at         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

-- =====================================================================
-- Access Control (for UI/API) â€“ simple RBAC
-- =====================================================================

CREATE TABLE fg_users (
  user_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username           VARCHAR2(80) UNIQUE NOT NULL,
  full_name          VARCHAR2(120),
  email              VARCHAR2(200),
  password_hash      VARCHAR2(128),               -- if managed locally
  status             VARCHAR2(20) DEFAULT 'ACTIVE',
  created_at         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP
);

CREATE TABLE fg_roles (
  role_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role_name          VARCHAR2(40) UNIQUE NOT NULL
);

CREATE TABLE fg_user_roles (
  user_id            NUMBER REFERENCES fg_users(user_id) ON DELETE CASCADE,
  role_id            NUMBER REFERENCES fg_roles(role_id) ON DELETE CASCADE,
  CONSTRAINT pk_fg_user_roles PRIMARY KEY (user_id, role_id)
);

-- =====================================================================
-- MLOps / DataOps helpers
-- =====================================================================

CREATE TABLE fg_stream_offsets (
  consumer_group     VARCHAR2(120) NOT NULL,
  topic              VARCHAR2(120) NOT NULL,
  partition_id       NUMBER NOT NULL,
  last_offset        NUMBER NOT NULL,
  updated_at         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  CONSTRAINT pk_fg_stream_offsets PRIMARY KEY (consumer_group, topic, partition_id)
);

CREATE TABLE fg_api_keys (
  key_id             NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  service_name       VARCHAR2(120) NOT NULL,
  api_key_hash       VARCHAR2(128) NOT NULL,
  created_at         TIMESTAMP(6) WITH TIME ZONE DEFAULT SYSTIMESTAMP,
  expires_at         TIMESTAMP(6) WITH TIME ZONE
);

-- =====================================================================
-- Views & Materialized Views
-- =====================================================================

CREATE OR REPLACE VIEW vw_alerts_open AS
SELECT a.alert_id, a.txn_id, a.risk_score, a.decision, a.created_at,
       t.account_id, t.amount, t.channel, c.customer_id, c.full_name
FROM fg_alerts a
JOIN fg_transactions t ON t.txn_id = a.txn_id
JOIN fg_accounts acc ON acc.account_id = t.account_id
JOIN fg_customers c ON c.customer_id = acc.customer_id
WHERE a.decision IN ('PENDING','CHALLENGE');

-- Example MV for analyst dashboard (refresh via job)
CREATE MATERIALIZED VIEW mv_daily_risk_rollup
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
AS
SELECT
  TRUNC(CAST(t.event_ts AS DATE)) AS day_dt,
  COUNT(*) AS txn_cnt,
  SUM(t.amount) AS txn_amt,
  AVG(ms.risk_score) AS avg_risk,
  SUM(CASE WHEN a.alert_id IS NOT NULL THEN 1 ELSE 0 END) AS alert_cnt
FROM fg_transactions t
LEFT JOIN fg_model_scores ms ON ms.txn_id = t.txn_id
LEFT JOIN fg_alerts a ON a.txn_id = t.txn_id
GROUP BY TRUNC(CAST(t.event_ts AS DATE));

-- =====================================================================
-- PL/SQL utility package (alert + incident workflow)
-- =====================================================================

CREATE OR REPLACE PACKAGE fg_ops AS
  PROCEDURE create_alert(
    p_txn_id      IN NUMBER,
    p_risk_score  IN NUMBER,
    p_reason      IN VARCHAR2,
    p_alert_id    OUT NUMBER
  );

  PROCEDURE open_incident(
    p_alert_id    IN NUMBER,
    p_priority    IN VARCHAR2 DEFAULT 'P2',
    p_assignee    IN VARCHAR2 DEFAULT NULL,
    p_incident_id OUT NUMBER
  );

  PROCEDURE log_notification(
    p_alert_id    IN NUMBER,
    p_customer_id IN NUMBER,
    p_channel     IN VARCHAR2,
    p_destination IN VARCHAR2,
    p_template    IN VARCHAR2,
    p_payload     IN CLOB,
    p_status      IN VARCHAR2 DEFAULT 'SENT'
  );
END fg_ops;
/

CREATE OR REPLACE PACKAGE BODY fg_ops AS
  PROCEDURE create_alert(
    p_txn_id      IN NUMBER,
    p_risk_score  IN NUMBER,
    p_reason      IN VARCHAR2,
    p_alert_id    OUT NUMBER
  ) IS
  BEGIN
    INSERT INTO fg_alerts (txn_id, risk_score, reason_summary)
    VALUES (p_txn_id, p_risk_score, p_reason)
    RETURNING alert_id INTO p_alert_id;

    INSERT INTO fg_case_audit(entity_type, entity_id, action, actor, details_json)
    VALUES ('ALERT', p_alert_id, 'CREATE', 'system',
            json_object('reason' VALUE p_reason, 'risk' VALUE p_risk_score));
  END;

  PROCEDURE open_incident(
    p_alert_id    IN NUMBER,
    p_priority    IN VARCHAR2,
    p_assignee    IN VARCHAR2,
    p_incident_id OUT NUMBER
  ) IS
  BEGIN
    INSERT INTO fg_incidents (alert_id, priority, assignee)
    VALUES (p_alert_id, p_priority, p_assignee)
    RETURNING incident_id INTO p_incident_id;

    INSERT INTO fg_case_audit(entity_type, entity_id, action, actor, details_json)
    VALUES ('INCIDENT', p_incident_id, 'CREATE', 'system',
            json_object('priority' VALUE p_priority, 'assignee' VALUE p_assignee));
  END;

  PROCEDURE log_notification(
    p_alert_id    IN NUMBER,
    p_customer_id IN NUMBER,
    p_channel     IN VARCHAR2,
    p_destination IN VARCHAR2,
    p_template    IN VARCHAR2,
    p_payload     IN CLOB,
    p_status      IN VARCHAR2
  ) IS
  BEGIN
    INSERT INTO fg_notifications(alert_id, customer_id, channel, destination, message_template, message_payload, status)
    VALUES (p_alert_id, p_customer_id, p_channel, p_destination, p_template, p_payload, p_status);

    INSERT INTO fg_case_audit(entity_type, entity_id, action, actor, details_json)
    VALUES ('NOTIFICATION', p_alert_id, 'SEND', 'system',
            json_object('channel' VALUE p_channel, 'destination' VALUE p_destination, 'status' VALUE p_status));
  END;
END fg_ops;
/

-- =====================================================================
-- Sample Data (minimal)
-- =====================================================================

INSERT INTO fg_customers(full_name, email, phone_e164, kyc_level, risk_segment) 
VALUES ('At Vizag', 'palli.srinivas@gmail.com', '+917550012486', 'KYC_FULL', 'NORMAL');

INSERT INTO fg_accounts(customer_id, core_acct_no, acct_type) 
SELECT customer_id, 'SB-0001', 'SAVINGS' FROM fg_customers WHERE full_name='At Vizag';

INSERT INTO fg_merchants(name, mcc_code, category, country, city) 
VALUES ('ACME E-Store', '5311', 'E-COMMERCE', 'IN', 'Chennai');

INSERT INTO fg_devices(customer_id, device_fingerprint, os, app_version, last_seen_at)
SELECT customer_id, 'dev-abc-123', 'Android', '5.2.1', SYSTIMESTAMP FROM fg_customers WHERE full_name='At Vizag';

INSERT INTO fg_rules(rule_code, name, severity, is_active, definition_json) VALUES
('VELOCITY_1H_5TXN', 'More than 5 txns in 1 hour', 'HIGH', 'Y',
 '{"scope":"ACCOUNT","window_minutes":60,"txn_count_gt":5}');

INSERT INTO fg_model_versions(model_name, version, deployed_at) VALUES
('gbm_txn', 'v2.1.0', SYSTIMESTAMP);

COMMIT;

-- =====================================================================
-- Example: end-to-end insert (transaction -> score -> alert -> incident)
-- =====================================================================

-- Create a transaction
INSERT INTO fg_transactions(event_id, event_ts, account_id, merchant_id, amount, channel, geolat, geolon, ip_addr, device_id)
SELECT 'evt-1001', SYSTIMESTAMP, a.account_id, m.merchant_id, 24999.00, 'CARD', 13.0827, 80.2707, '203.0.113.10', d.device_id
FROM fg_accounts a
JOIN fg_merchants m ON m.name='ACME E-Store'
JOIN fg_devices d ON d.device_fingerprint='dev-abc-123'
FETCH FIRST 1 ROWS ONLY;

-- Attach features
INSERT INTO fg_txn_features(txn_id, feature_json)
SELECT txn_id, '{"hour_of_day": 21, "is_new_device": false, "amt_to_avg_ratio": 3.2}' FROM fg_transactions WHERE event_id='evt-1001';

-- Score it
INSERT INTO fg_model_scores(txn_id, model_id, risk_score, threshold_used, inference_ms, explain_json)
SELECT t.txn_id, mv.model_id, 86.5, 75.0, 22, '{"top_factors":["amount","hour_of_day"]}'
FROM fg_transactions t CROSS JOIN fg_model_versions mv
WHERE t.event_id='evt-1001' AND mv.model_name='gbm_txn' AND mv.version='v2.1.0';

-- Create alert + incident via package
DECLARE
  v_alert_id NUMBER;
  v_incident NUMBER;
  v_txn_id   NUMBER;
BEGIN
  SELECT txn_id INTO v_txn_id FROM fg_transactions WHERE event_id='evt-1001';
  fg_ops.create_alert(v_txn_id, 86.5, 'High risk per gbm_txn v2.1.0', v_alert_id);
  fg_ops.open_incident(v_alert_id, 'P1', 'analyst01', v_incident);
END;
/
COMMIT;

CREATE SEQUENCE fg_device_seq
  START WITH 100
  INCREMENT BY 1
  NOCACHE
  NOCYCLE;

CREATE SEQUENCE fg_decision_seq
  START WITH 100
  INCREMENT BY 1
  NOCACHE
  NOCYCLE;
  
CREATE SEQUENCE fg_alerts_seq
  START WITH 100
  INCREMENT BY 1
  NOCACHE
  NOCYCLE; 

  
 ALTER TABLE fg_transactions 
ADD (DEVICE_ID VARCHAR2(50));
 

-- =====================================================================
-- Indexing suggestions (adjust based on workload)
-- =====================================================================
-- CREATE INDEX idx_fg_alerts_txn ON fg_alerts(txn_id);
-- CREATE INDEX idx_fg_incidents_alert ON fg_incidents(alert_id);
-- CREATE INDEX idx_fg_notif_alert ON fg_notifications(alert_id);
-- CREATE INDEX idx_fg_rule_hits_txn ON fg_rule_hits(txn_id);
-- CREATE INDEX idx_fg_feedback_txn ON fg_feedback(txn_id);

-- =====================================================================
-- Housekeeping jobs (pseudo â€“ create DBMS_SCHEDULER jobs in ops scripts)
-- =====================================================================
-- - Refresh mv_daily_risk_rollup hourly
-- - Purge old OTP records (expires_at < SYSTIMESTAMP - interval '1' day)
-- - Archive notifications older than 180 days to object storage

